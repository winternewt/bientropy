#pragma once
#ifndef BIENTROPY_LUT
#define BIENTROPY_LUT
#include <bittwid.h> 
#include <bitent_types.h>

static constexpr long double bient_mean[] = { 0, 0, 0.5L, 0.5629072918469556L, 0.5940118304730429L,	0.6099074851872713L, 0.6181308042545243L, 0.6223941610697235L, 0.6245992640826006L,
				0.6257352277658467L, 0.6263179348365903L, 0.6266156764077077L, 0.6267673017037908L,	0.6268443019580091L, 0.6268833158727790L, 0.6269030463031213L, 0.6269130093318138L,
				0.6269180339414062L, 0.6269205653568320L, 0.6269218395917017L, 0.6269224805359900L,	0.6269228027347796L, 0.6269229646169967L, 0.6269230459148134L, 0.6269230867267654L,
				0.6269231072075346L, 0.6269231174822805L, 0.6269231226357248L, 0.6269231252199984L,	0.6269231265131034L, 0.6269231271613554L, 0.6269231274882212L, 0.6269231276502662L,
};

static constexpr long double bient_median[] = { 0, 0, .5, 0.6394319446848297L, 0.6774615329055064L,	0.6887267203565403L, 0.6931229942425931L, 0.6946361285769693L, 0.6952435781283301L,
				0.6953044938392585L, 0.6953811930622632L, 0.6954020947300412L, 0.6953877587493129L,	0.6953830828825062L, 0.6953818904860269L, 0.6953798623516347L, 0.6953790464445012L,
				0.6953785085747551L, 0.6953781987671394L, 0.6953780170280413L, 0.6953779175032802L,	0.6953778620963064L, 0.6953778325345972L, 0.6953778152439428L, 0.6953778068472364L,
				0.6953778023882757L, 0.6953777991752179L, 0.6953777979001152L, 0.6953777972587906L,	0.6953777969196177L, 0.6953777967490724L, 0.6953777966540725L, 0.6953777966098035L,
};

static constexpr long double tbient_mean[] = { 0, 0, 0.5, 0.5730075873395521L, 0.6264473063708629L,	0.6671798294986435L, 0.6992469312469233L, 0.7251625260596269L, 0.7465625192608511L,
				0.7645528372611558L, 0.7799059079535847L, 0.7931766557282824L, 0.8047736634831420L,	0.8150043175261418L, 0.8241043067738414L, 0.8322574128231507L, 0.8396091036667002L,
				0.8462760719639766L, 0.8523530578284158L, 0.8579178152396264L, 0.8630347851319595L,	0.8677578516778891L, 0.8721324382522176L, 0.8761971207990419L, 0.8799848837056530L,
				0.8835241075351679L, 0.8868393533156052L, 0.8899519908058484L, 0.8928807059197874L,	0.8956419136945813L, 0.8982500967647143L, 0.9007180846553290L, 0.9030572856418769L,
};

static constexpr long double tbient_median[] = { 0, 0, .5, .6618189176584930L, 0.7330711043428884L,	0.7643669665771910L, 0.7798858692254744L, 0.7861650525035556L, 0.7880058678180072L,
				0.7981297054743710L, 0.8129844053158633L, 0.8239881809145126L, 0.8347703010340126L,	0.8425743506142396L, 0.8499682766502010L, 0.8571598161125837L, 0.8638523645793574L,
				0.8696408036265644L, 0.8749474942512827L, 0.8794652399394415L, 0.8836228887360915L,	0.8875637620751334L, 0.8911567571259453L, 0.8945064894632148L, 0.8976307485408536L,
				0.9005385865154680L, 0.9032640076347110L, 0.9058248572486160L, 0.9082370122208172L,	0.9105155064695875L, 0.9126692983333080L, 0.9147055519357284L, 0.9166369525093943L,
};

static constexpr long double log2LUT[] = { -1.0L, 0, 1.0, 1.5849625007211560L, 2.0000000000000000L,	2.3219280948873621L, 2.5849625007211560L, 2.8073549220576041L, 3.0000000000000000L,
				3.1699250014423121L, 3.3219280948873621L, 3.4594316186372973L, 3.5849625007211560L, 3.7004397181410921L, 3.8073549220576041L, 3.9068905956085187L, 4.0000000000000000L,
				4.0874628412503390L, 4.1699250014423121L, 4.2479275134435852L, 4.3219280948873626L,	4.3923174227787606L, 4.4594316186372973L, 4.5235619560570130L, 4.5849625007211560L,
				4.6438561897747243L, 4.7004397181410926L, 4.7548875021634682L, 4.8073549220576037L,	4.8579809951275718L, 4.9068905956085187L, 4.9541963103868749L, 5.0000000000000000L,
				5.0443941193584533L, 5.0874628412503390L, 5.1292830169449663L, 5.1699250014423121L,	5.2094533656289501L, 5.2479275134435852L, 5.2854022188622487L, 5.3219280948873626L,
				5.3575520046180837L, 5.3923174227787606L, 5.4262647547020979L, 5.4594316186372973L,	5.4918530963296747L, 5.5235619560570130L, 5.5545888516776376L, 5.5849625007211560L,
				5.6147098441152083L, 5.6438561897747243L, 5.6724253419714951L, 5.7004397181410926L,	5.7279204545631987L, 5.7548875021634682L, 5.7813597135246599L, 5.8073549220576037L,
				5.8328900141647412L, 5.8579809951275718L, 5.8826430493618415L, 5.9068905956085187L,	5.9307373375628866L, 5.9541963103868749L, 5.9772799234999167L, 6.0000000000000000L,
				6.0223678130284543L, 6.0443941193584533L, 6.0660891904577720L, 6.0874628412503390L,	6.1085244567781691L, 6.1292830169449663L, 6.1497471195046822L, 6.1699250014423121L,
				6.1898245588800175L, 6.2094533656289501L, 6.2288186904958813L, 6.2479275134435852L,	6.2667865406949010L, 6.2854022188622487L, 6.3037807481771030L, 6.3219280948873626L,
				6.3398500028846243L, 6.3575520046180837L, 6.3750394313469245L, 6.3923174227787606L,	6.4093909361377017L, 6.4262647547020979L, 6.4429434958487279L, 6.4594316186372973L,
				6.4757334309663976L, 6.4918530963296747L, 6.5077946401986963L, 6.5235619560570130L,	6.5391588111080309L, 6.5545888516776376L, 6.5698556083309478L, 6.5849625007211560L,
				6.5999128421871278L, 6.6147098441152083L, 6.6293566200796094L, 6.6438561897747243L,	6.6582114827517946L, 6.6724253419714951L, 6.6865005271832185L, 6.7004397181410926L,
				6.7142455176661224L, 6.7279204545631987L, 6.7414669864011464L, 6.7548875021634682L,	6.7681843247769259L, 6.7813597135246599L, 6.7944158663501061L, 6.8073549220576037L,
				6.8201789624151878L, 6.8328900141647412L, 6.8454900509443747L, 6.8579809951275718L,	6.8703647195834047L, 6.8826430493618415L, 6.8948177633079437L, 6.9068905956085187L,
				6.9188632372745946L, 6.9307373375628866L, 6.9425145053392398L, 6.9541963103868749L,	6.9657842846620869L, 6.9772799234999167L, 6.9886846867721654L, 7.0000000000000000L, }; //128

/// std::log2(double) isnt't constexpr :(( 
static_assert(log2LUT[128] == 7.0f, "lutfail");

//Lut hacks

constexpr long double log_sum(std::size_t curr, std::size_t total)
{
	long double res = 0;
	UNUSED(total);
	for (auto i = BIENTROPY_MINLENGTH; i <= curr; i++)
		res += log2LUT[i];
	return res;
}

static constexpr auto stc = log2i(BIENTROPY_MAXLENGTH) + 1; // 6 for 32bit, 7 for 64, +1 bits to avoid overflow on border [0..2^stc]

constexpr long double bien_egV(std::size_t curr, std::size_t total) { //precompute all we can
	//const bitcomposition b = bien_egh(curr, total);
	UNUSED(total);
	uint_fast16_t ones = ((uint_fast16_t)curr & bitmaskLUT<size_t>(stc)); //lower stc bits store second dimension need stc
	uint_fast16_t bits = 1 + (((uint_fast16_t)curr >> (stc)) & bitmaskLUT<size_t>(stc - 1)); //upper stc-1 bits store second dimension, n=0 is nosential, so [0..2^stc-1] variants
	if (bits == 0 || ones > bits)
		return 0; //divby0 and undfined part!!
	uint_fast16_t zeros = bits - ones;
	FloatT p = -(FloatT)ones / bits; //ones percentage
	FloatT q = -(FloatT)zeros / bits; //zeros percentage
	long double e = (ones == 0) ? 0 : p * (log2LUT[ones] - log2LUT[bits]);
	long double g = (zeros == 0) ? 0 : q * (log2LUT[zeros] - log2LUT[bits]);
	return e + g;
}

static constexpr auto logSumLUT = LUT::make_array<1 << stc>(log_sum); //precomputed logarithm summs
static constexpr auto egLUT = LUT::make_array<1 << (2*stc+1)>(bien_egV); //precomputed 2D g all possible values
static constexpr auto pow2LUT = LUT::Powers2<Bits>;


#endif
